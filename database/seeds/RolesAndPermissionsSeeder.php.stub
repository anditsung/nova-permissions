<?php

use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolesAndPermissionsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Reset cached roles and permissions
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        $collection = collect([
            \App\User::class,
            \Spatie\Permission\Models\Role::class,
            \Spatie\Permission\Models\Permission::class,
            // 'teams',
            // ... // List all your Models you want to have Permissions for.
        ]);

        $collection->each(function ($item, $key) {
            // create permissions for each collection item
            $group_name = $this->groupName($item);
            $permission_name = $this->permissionName($item);
            Permission::create(['group' => $group_name, 'name' => 'view own ' . $permission_name]);
            Permission::create(['group' => $group_name, 'name' => 'view ' . $permission_name]);
            Permission::create(['group' => $group_name, 'name' => 'manage own ' . $permission_name]);
            Permission::create(['group' => $group_name, 'name' => 'manage ' . $permission_name]);
            Permission::create(['group' => $group_name, 'name' => 'restore ' . $permission_name]);
            Permission::create(['group' => $group_name, 'name' => 'forceDelete ' . $permission_name]);
        });

        // Create a Super-Admin Role and assign all Permissions
//        $role = Role::create(['name' => 'administrator']);
//        $role->givePermissionTo(Permission::all());
        $role = Role::findOrCreate('administrator');
        $role->givePermissionTo(Permission::all());

        // Give User Super-Admin Role
         $user = App\User::whereEmail('anditsung@gmail.com')->first(); // Change this to your email.
         $user->assignRole('administrator');
    }

    private function groupName($item)
    {
        return Str::plural(Str::title(Str::snake(class_basename($item), ' ')));
    }

    private function permissionName($item)
    {
        return Str::plural(Str::kebab(class_basename($item)));
    }
}
